<?php

namespace Framework\Database;

use Framework\Authentication\Session;
use Framework\Config\Config;
use Framework\Database\Interface\BlueprintInterface;
use Framework\Database\Interface\DatabaseInterface;
use Framework\Database\Interface\ResultInterface;
use Framework\Database\MariaDB\MariaDB;
use Framework\Database\Query\QueryBuilder;
use Framework\Database\Query\WhereQueryBuilder;
use Framework\Database\SQLite\SQLite;
use RuntimeException;

class Database
{
    private static ?DatabaseInterface $db = null;

    /** Execute the SQL generated by the given query build */
    public static function executeBuilder(QueryBuilder|WhereQueryBuilder $queryBuilder): ResultInterface|false
    {
        if ($queryBuilder->isWhereEmpty()) {
            return self::unprepared($queryBuilder->build());
        } else {
            return self::prepared(
                $queryBuilder->build(),
                $queryBuilder->getColTypes(),
                ...$queryBuilder->getValues()
            );
        }
    }

    public static function executeBlueprint(BlueprintInterface $blueprint): ResultInterface|false
    {
        $result = false;
        foreach ($blueprint->build() as $sql) {
            $result = self::unprepared($sql);
            if ($result === false) {
                return false;
            }
        }
        return $result;
    }

    /** Execute the given unprepared query. You should try to avoid unprepared statements if they contain user input! */
    public static function unprepared(string $query): ResultInterface|false
    {
        self::getDb();
        if (Session::getValue('showSqlQueries') === 'true') {
            echo $query . '<br>';
        }
        return self::$db->unprepared($query);
    }

    /**
     * Execute the given prepared statement
     * 
     * @param string $colTypes i = int, d = float, s = string
    */
    public static function prepared(string $query, string $colTypes, ...$values): ResultInterface|false
    {
        self::getDb();
        if (Session::getValue('showSqlQueries') === 'true') {
            echo $query . '<br>';
        }
        return self::$db->prepared($query, $colTypes, ...$values);
    }

    /** Get the database name */
    public static function database(): string
    {
        return Config::env('DB_DATABASE');
    }

    private static function getDb(): void
    {
        if (self::$db !== null) {
            return;
        }
        switch (Config::env('DB_CONNECTION')) {
            case 'mariadb':
                self::$db = new MariaDB(Config::env('DB_HOST'), intval(Config::env('DB_PORT')), Config::env('DB_DATABASE'), Config::env('DB_USERNAME'), Config::env('DB_PASSWORD'));
                break;

            case 'sqlite':
                self::$db = new SQLite(Config::env('DB_FILE'));
                break;
            
            default:
                throw new RuntimeException('The database connection "' . Config::env('DB_CONNECTION') . '" is not supported');
        }
    }
}